pipeline {
  // Run on any agent; currently there are no restrictions on which
  // Jenkins build agents can or should run this job.
  agent any

  // Parameterize build based on all of its upstream dependencies, including:
  // - horizon (the fork of the Horizon source code)
  // - horizon-theme (the custom Horizon theme for Chameleon)
  // - blazar-dashboard (the fork of the plugin that adds Blazar UI to Horizon)
  parameters {
    string(name: 'HORIZON_JOB_NAME', defaultValue: 'horizon/chameleoncloud%2Ftrain',
           description: 'Jenkins job name for horizon')
    string(name: 'HORIZON_THEME_JOB_NAME', defaultValue: 'horizon-theme/master',
           description: 'Jenkins job name for horizon-theme dependency')
    string(name: 'BLAZAR_DASHBOARD_JOB_NAME', defaultValue: 'blazar-dashboard/chameleoncloud%2Ftrain',
           description: 'Jenkins job name for blazar-dashboard dependency')
    string(name: 'HEAT_DASHBOARD_JOB_NAME', defaultValue: 'heat-dashboard/chameleoncloud%2Ftrain',
           description: 'Jenkins job name for heat-dashboard dependency')
    string(name: 'DOCKER_TAG', defaultValue: 'train',
           description: 'Tag to apply to built docker image')
  }


  triggers {
    // Each upstream dependency also is added as a trigger. This means that if any
    // of the upstream builds complete, a new build of this build is triggered.
    upstream(upstreamProjects: "base-kolla/${env.BRANCH_NAME},${params.HORIZON_JOB_NAME},${params.HORIZON_THEME_JOB_NAME},${params.HEAT_DASHBOARD_JOB_NAME},${params.BLAZAR_DASHBOARD_JOB_NAME}",
             threshold: hudson.model.Result.SUCCESS)
  }

  // The Docker registry requires authentication; there is a Credentials item
  // in Jenkins for a special `kolla` user.
  environment {
    // Necessary so that `docker login` credentials are not put in shared location
    HOME = "${env.WORKSPACE}"
    DOCKER_REGISTRY = 'docker.chameleoncloud.org'
    DOCKER_REGISTRY_CREDS = credentials('kolla-docker-registry-creds')
  }

  // Each build consists of several _stages_...
  stages {
    // ... the first stage being a 'setup' stage, which we use to authenticate
    // against the Docker registry (which we need both during 'build' and during
    // 'publish'.)
    stage('docker-setup') {
      steps {
        sh 'docker login --username=$DOCKER_REGISTRY_CREDS_USR --password=$DOCKER_REGISTRY_CREDS_PSW $DOCKER_REGISTRY'
      }
    }

    // The build stage actually builds the container using Kolla. The output
    // of this stage is a Docker image locally on disk. KOLLA_PUSH instructs
    // this step to also push the image up to the remote registry.
    stage('build-and-publish') {
      environment {
        KOLLA_BUILD_PROFILE = 'horizon'
        KOLLA_PUSH = 'yes'
      }

      steps {
        // All the upstream artifacts are copied from their respective pipelines
        // to a special 'sources' directory. This directory is defined as
        // $locals_base in Kolla.
        copyArtifacts(projectName: "${params.HORIZON_JOB_NAME}",
                      target: "${env.WORKSPACE}/sources")
        copyArtifacts(projectName: "${params.HORIZON_THEME_JOB_NAME}",
                      target: "${env.WORKSPACE}/sources")
        copyArtifacts(projectName: "${params.BLAZAR_DASHBOARD_JOB_NAME}",
                      target: "${env.WORKSPACE}/sources")
        copyArtifacts(projectName: "${params.HEAT_DASHBOARD_JOB_NAME}",
                      target: "${env.WORKSPACE}/sources")
        sh "make clean"
        sh "make build-with-locals"
      }
    }
  }

  // The post section contains tasks to run after the pipeline succeeds or fails.
  // We log out of the Docker registry to clean up credentials cached on disk.
  post {
    always {
      sh 'docker logout $DOCKER_REGISTRY'
    }

    failure {
      slackSend(
        channel: "#notifications",
        message: "*Build* of *horizon* (${env.DOCKER_TAG}) failed. <${env.RUN_DISPLAY_URL}|View build log>",
        color: "danger"
      )
    }

    success {
      slackSend(
        channel: "#notifications",
        message: "*Build* of *horizon* (${env.DOCKER_TAG}) completed successfuly. <${env.RUN_DISPLAY_URL}|View build log>",
        color: "good"
      )
      // Trigger deploy to development environments
      build job: 'kolla-ansible-deploy', wait: false, parameters: [
        string(name: 'KOLLA_SERVICE_NAME', value: 'horizon'),
        string(name: 'JENKINS_AGENT_LABEL', value: 'ansible-uc-dev')
      ]
    }
  }
}
